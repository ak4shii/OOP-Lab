1. What class should implement the Comparable interface?

  Only one comparison is allowed while using Comparable, whereas more than one custom Comparators that use different interpretations of what sorting means can be writen given a type. 
  And so if a class needs soring just by one attribute we use the Comparable.

2. In those classes, how should you implement the compareTo() method to reflect the ordering that we want?

  We implement the Comparable and use its nature of sorting methods with the Collections.sort(list) 

3. Can we have two ordering rules of the item(by title then cost and by cost then title) if we use this Comparable interface approach?

  If we use this Comparable interface approach, it will allow only one comparison, and thus we cannot have two ordering rules of the item.

4. Suppose the DVDs have a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow this?
  
  We  will use the Comparator class and overwrite its comparing method:

import java.util.Comparator;

class CombinedComparator implements Comparator<CartItem>{
    @Override
    public int compare(CartItem item1, CartItem item2){
        //Compare by Title
        int titleComparison = item1.getTitle().compareTo(item2.getTitle());
        if (titleComparison != 0){
            return titleComparison;
        } 
        else{
            //If Titles are the same, compare by decreasing length
            if (item1 instanceof DVDItem && item2 instanceof DVDItem){
                //Compare DVDs by decreasing length
                return Integer.compare(((DVDItem) item2).getLength(), ((DVDItem) item1).getLength());
            } 
            else{
                //For non-DVD items, treat them as equal in length
                //Compare by cost if they are not DVDs or if both are DVDs with the same length
                return Double.compare(item1.getCost(), item2.getCost());
            }
        }
    }
}